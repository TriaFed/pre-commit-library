# Infrastructure as Code Configuration
# Setup for Terraform, CloudFormation, and Docker with security focus

repos:
  - repo: https://github.com/TriaFed/pre-commit-library
    rev: v1.0.0  # Use the latest version
    hooks:
      # Security hooks (essential for GenAI projects)
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
      
      - id: hardcoded-credentials
        name: "Detect hardcoded passwords and API keys"
      
      - id: hardcoded-urls
        name: "Detect hardcoded URLs"
        exclude: ^(\.terraform/|terraform\.tfstate)
      
      - id: genai-security-check
        name: "GenAI-specific security validation"
      
      # Terraform
      - id: terraform-fmt
        name: "Terraform format"
        files: \.tf$
      
      - id: terraform-validate
        name: "Terraform validate"
        files: \.tf$
      
      - id: terraform-tflint
        name: "TFLint Terraform linter"
        files: \.tf$
      
      # CloudFormation
      - id: cloudformation-validate
        name: "CloudFormation template validation"
        files: \.(yaml|yml|json)$
        # Only run on files that contain CloudFormation keywords
      
      # Docker
      - id: dockerfile-lint
        name: "Dockerfile linting"
        files: Dockerfile.*
      
      # File validation
      - id: check-yaml
        name: "Check YAML syntax"
        exclude: ^(\.terraform/)
      
      - id: check-json
        name: "Check JSON syntax"
        exclude: ^(\.terraform/|terraform\.tfstate)
      
      - id: trailing-whitespace
        name: "Remove trailing whitespace"
        exclude: ^(\.terraform/)
      
      - id: end-of-file-fixer
        name: "Ensure files end with newline"
        exclude: ^(\.terraform/)
      
      - id: check-merge-conflict
        name: "Check for merge conflicts"
      
      - id: check-large-files
        name: "Check for large files"
        args: ['--maxkb=2000']

# Additional Infrastructure-specific configuration files to create:
#
# .tflint.hcl:
# plugin "terraform" {
#   enabled = true
#   preset  = "recommended"
# }
#
# plugin "aws" {
#     enabled = true
#     version = "0.21.1"
#     source  = "github.com/terraform-linters/tflint-ruleset-aws"
# }
#
# rule "terraform_deprecated_interpolation" {
#   enabled = true
# }
#
# rule "terraform_unused_declarations" {
#   enabled = true
# }
#
# rule "terraform_comment_syntax" {
#   enabled = true
# }
#
# rule "terraform_documented_outputs" {
#   enabled = true
# }
#
# rule "terraform_documented_variables" {
#   enabled = true
# }
#
# .dockerignore:
# .git
# .gitignore
# README.md
# .env
# .nyc_output
# coverage
# .cache
# node_modules
# npm-debug.log
# Dockerfile*
# .dockerignore
# **/.git
# **/.DS_Store
# **/node_modules
#
# Example .secrets.baseline for infrastructure:
# Run: detect-secrets scan --baseline .secrets.baseline
# This will create a baseline file that tracks known "secrets" that are actually
# safe (like example values, test data, etc.)
#
# Security best practices for Infrastructure as Code:
# 1. Never hardcode credentials in Terraform/CloudFormation
# 2. Use AWS Secrets Manager or similar for sensitive values
# 3. Use data sources to reference existing resources
# 4. Tag all resources appropriately
# 5. Enable encryption by default
# 6. Use least privilege access principles
# 7. Regularly scan for security vulnerabilities
